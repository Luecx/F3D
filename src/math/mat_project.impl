//
// Created by finn on 5/31/24.
//

#ifndef F3D_MAT_PROJECT_IMPL
#define F3D_MAT_PROJECT_IMPL

template<typename TYPE, int ROWS, int COLS>
template<int R, int C>
typename std::enable_if<R == 4 && C == 4, Matrix<TYPE, ROWS, COLS>>::type
    Matrix<TYPE, ROWS, COLS>::view_look_at(const Matrix<TYPE, 3, 1>& eye, const Matrix<TYPE, 3, 1>& center, const Matrix<TYPE, 3, 1>& up) {
    auto f = (center - eye).normalised();
    auto u = up.normalised();
    auto s = f.cross(u).normalised();
    u = s.cross(f);

    Matrix<TYPE, ROWS, COLS> result;
    result(0, 0) = s[0];
    result(0, 1) = s[1];
    result(0, 2) = s[2];
    result(1, 0) = u[0];
    result(1, 1) = u[1];
    result(1, 2) = u[2];
    result(2, 0) = -f[0];
    result(2, 1) = -f[1];
    result(2, 2) = -f[2];
    result(0, 3) = -(s * eye);
    result(1, 3) = -(u * eye);
    result(2, 3) = (f * eye);
    result(3, 3) = 1;
    return result;
}

template<typename TYPE, int ROWS, int COLS>
template<int R, int C>
typename std::enable_if<R == 4 && C == 4, Matrix<TYPE, ROWS, COLS>>::type
    Matrix<TYPE, ROWS, COLS>::view_perspective(TYPE fov, TYPE aspectRatio, TYPE near, TYPE far) {
    Matrix<TYPE, ROWS, COLS> projectionMatrix {};

    TYPE yScale = (TYPE) ((1.0 / tan((fov / 2.0) * M_PI / 180.0)));
    TYPE xScale = yScale / aspectRatio;
    TYPE frustumLength = far - near;

    projectionMatrix(0, 0) = xScale;
    projectionMatrix(1, 1) = yScale;
    projectionMatrix(2, 2) = -(far + near) / frustumLength;
    projectionMatrix(3, 2) = -1;
    projectionMatrix(2, 3) = -2 * near * far / frustumLength;

    return projectionMatrix;
}
template<typename TYPE, int ROWS, int COLS>
template<int R, int C>
typename std::enable_if<R == 4 && C == 4, Matrix<TYPE, ROWS, COLS>>::type
    Matrix<TYPE, ROWS, COLS>::view_orthogonal(TYPE left, TYPE right, TYPE bottom, TYPE top, TYPE near, TYPE far) {
    Matrix<TYPE, ROWS, COLS> projectionMatrix {};

    projectionMatrix(0, 0) = 2 / (right - left);
    projectionMatrix(1, 1) = 2 / (top - bottom);
    projectionMatrix(2, 2) = -2 / (far - near);
    projectionMatrix(3, 3) = 1;
    projectionMatrix(0, 3) = -(right + left) / (right - left);
    projectionMatrix(1, 3) = -(top + bottom) / (top - bottom);
    projectionMatrix(2, 3) = -(far + near) / (far - near);

    return projectionMatrix;
}


#endif    // F3D_MAT_PROJECT_IMPL
